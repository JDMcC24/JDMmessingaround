import math
import numpy as np
from matplotlib import pyplot as plt




def spradius(A):
    #Input: n x n Matrix, A, as an array
    #Output: spectral radius of A
    if np.shape(A)[0] != np.shape(A)[1]:
        return print( "Error: Input must be a square matrix")
    return max(np.linalg.eig(A)[0])

def is_prime(n):
    #Input: Postiive integer n
    #Output: True if n is prime, False otherwise.
    if n <= 1:
        return print('is_prime Error: Input must be a postive integer.')

    for i in range(2,math.floor(math.sqrt(n))+1,1):
        if n % (i) == 0:
            return False
    return True

def prime_list(n):
    #Returns all prime numbers less than or equal to n
    #Input: positive integer
    #Output: Array of prime numbers not larger than n
    if n <= 1:
        return print('prime_list Error: Input must be a positive interger.')
    plist = []
    for i in range(2,n+1,1):
        if is_prime(i) == True:
            plist.append(i)
    return plist

def Gblist(n):
    #Input: Positive integer n
    #Output: Pairs of prime number which sum to n, and the number of such pairs

    if n <= 1:
        return print('GBlist Error: Input must be a positive interger larger than 1.')
    glist = []
    num = 0
    for i in prime_list(n):
        if is_prime(n-i) == True:
            pair = (i,n-i)
            glist.append(pair)
            num+= 1
    glist.append(str(num)+ " total pairs" )
    return glist

def Czlist(n):
    #Input: Integer greater than 1
    #Output: Sequence generated by rules of the Collatz conjecture and the number of steps until converges to 1
    if n <= 1:
        return print('Error: Input must be an integer greater than 1.')
    steps = [n]
    while n > 1:
        if n % 2 == 0: 
            n = n/2
            steps.append(n)
            
        elif n%2 == 1:
            n = 3*n+1
            steps.append(n)
    num = len(steps)-1
    return steps, num

def CzPlot(n):
    #Plots Natural numbers not larger than n against how long the Collatz sequence takes to get to 1
    xs = []
    ys = []
    
    for i in range(2,n,1):
        xs.append(i)
        ys.append(Czlist(i)[1])
    plt.scatter(xs,ys,s=5)
    plt.xlabel("Number")
    plt.ylabel("Number of Steps Until 1")
    plt.title( "Collatz Sequences" )
    plt.show()


    
    


